knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(Rsamtools)
library(GenomicAlignments)
library(epiwraps)
})
?BamFile
MM.1S_H3K9Me3_GRCh38_Repl2 = BamFile("MM.1S_H3K9Me3_GRCh38_Repl2.bam")
which <- as(seqinfo(bfl)["seq2"])
which <- as(seqinfo(MM.1S_H3K9Me3_GRCh38_Repl2)["seq2"])
MM.1S_H3K9Me3_GRCh38_Repl2$index
MM.1S_H3K9Me3_GRCh38_Repl2$index
seqinfo(MM.1S_H3K9Me3_GRCh38_Repl2)
which <- as(seqinfo(MM.1S_H3K9Me3_GRCh38_Repl2)["chr1"])
which <- as(seqinfo(MM.1S_H3K9Me3_GRCh38_Repl2)["seq1"])
seqinfo(MM.1S_H3K9Me3_GRCh38_Repl2)
param <- ScanBamParam(which = GRanges("chr1"))
param <- ScanBamParam(which = GRanges("1"))
indexBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam")
bam_data <- scanBam(bam_file, param = ScanBamParam(what = "seqnames", seqnames = "1"))
bam_data <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = ScanBamParam(what = "seqnames", seqnames = "1"))
bam_data <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = ScanBamParam(what = "seqnames", seqnames = "chr1"))
bam_data <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = ScanBamParam(what = "seqnames", seqnames = c("chr1"))
bam_data <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = ScanBamParam(what = "seqnames", seqnames = c("chr1")))
bam_data <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = ScanBamParam(what = "seqnames", seqnames = "1"))
bam_data <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", which="1")
head(bam_data)
View(bam_data)
gc()
suppressPackageStartupMessages({
library(Rsamtools)
library(GenomicAlignments)
library(epiwraps)
})
suppressPackageStartupMessages({
library(Rsamtools)
library(GenomicAlignments)
library(epiwraps)
})
param <- ScanBamParam(which = GRanges("chr1:"))
param <- ScanBamParam(which = GRanges("chr1:1-999999"))
MM.1S_H3K9Me3_GRCh38_Repl2 <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = param)
View(MM.1S_H3K9Me3_GRCh38_Repl2)
View(MM.1S_H3K9Me3_GRCh38_Repl2)
View(param)
View(param)
head(MM.1S_H3K9Me3_GRCh38_Repl2)
MM.1S_H3K9Me3_GRCh38_Repl2 <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = param)
param <- ScanBamParam(which = GRanges("chr1:1-999999999"))
MM.1S_H3K9Me3_GRCh38_Repl2 <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = param)
param <- ScanBamParam(which = GRanges("chr1:1-9999999"))
MM.1S_H3K9Me3_GRCh38_Repl2 <- scanBam("MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = param)
?scanBam
MM.1S_H3K9Me3_GRCh38_Repl2 <- scanBam(file="MM.1S_H3K9Me3_GRCh38_Repl2.bam", param = param)
files <- list.files(pattern = ".bam$")
files
knitr::opts_chunk$set(echo = TRUE)
download.file("https://www.encodeproject.org/files/ENCFF664NUE/@@download/ENCFF664NUE.bam", "MM.1S_H3K9Me3_GRCh38_Repl1.bam")
options(timeout = 999999)
download.file("https://www.encodeproject.org/files/ENCFF664NUE/@@download/ENCFF664NUE.bam", "MM.1S_H3K9Me3_GRCh38_Repl1.bam")
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF783PVH/@@download/ENCFF783PVH.bam", "https://www.encodeproject.org/files/ENCFF732LKQ/@@download/ENCFF732LKQ.bam")
fileNames <- c("H929_H3K9Me3_GRCh38_Repl1.bam", "H929_H3K9Me3_GRCh38_Repl2.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF783PVH/@@download/ENCFF783PVH.bam", "https://www.encodeproject.org/files/ENCFF732LKQ/@@download/ENCFF732LKQ.bam")
fileNames <- c("H929_H3K9Me3_GRCh38_Repl1.bam", "H929_H3K9Me3_GRCh38_Repl2.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF086FJX/@@download/ENCFF086FJX.bam", "https://www.encodeproject.org/files/ENCFF500IZS/@@download/ENCFF500IZS.bam")
fileNames <- c("F43_H3K9Me3_GRCh38_Repl1.bam", "M37_H3K9Me3_GRCh38_Repl1.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF146QXV/@@download/ENCFF146QXV.bam", "https://www.encodeproject.org/files/ENCFF436DQO/@@download/ENCFF436DQO.bam")
fileNames <- c("MM.1S_H3K27Me3_GRCh38_Repl1.bam", "MM.1S_H3K27Me3_GRCh38_Repl1.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF146QXV/@@download/ENCFF146QXV.bam", "https://www.encodeproject.org/files/ENCFF436DQO/@@download/ENCFF436DQO.bam")
fileNames <- c("MM.1S_H3K27Me3_GRCh38_Repl1.bam", "MM.1S_H3K27Me3_GRCh38_Repl1.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
download.file("https://www.encodeproject.org/files/ENCFF436DQO/@@download/ENCFF436DQO.bam", "MM.1S_H3K27Me3_GRCh38_Repl1.bam", mode = "wb")
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF146QXV/@@download/ENCFF146QXV.bam", "https://www.encodeproject.org/files/ENCFF436DQO/@@download/ENCFF436DQO.bam")
fileNames <- c("MM.1S_H3K27Me3_GRCh38_Repl1.bam", "MM.1S_H3K27Me3_GRCh38_Repl2.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF886SFI/@@download/ENCFF886SFI.bam", "https://www.encodeproject.org/files/ENCFF277DVZ/@@download/ENCFF277DVZ.bam")
fileNames <- c("H929_H3K27Me3_GRCh38_Repl1.bam", "H929_H3K27Me3_GRCh38_Repl2.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
options(timeout = 999999)
download.file("https://www.encodeproject.org/files/ENCFF664NUE/@@download/ENCFF664NUE.bam", "MM.1S_H3K9Me3_GRCh38_Repl1.bam")
download.file("https://www.encodeproject.org/files/ENCFF664NUE/@@download/ENCFF664NUE.bam", "MM.1S_H3K9Me3_GRCh38_Repl1.bam")
??callPeaks
? callPeaks
?callPeaks
??callPeaks
suppressPackageStartupMessages({
library(Rsamtools)
library(GenomicAlignments)
library(epiwraps)
})
peaks <- callPeaks("MM.1S_H3K9Me3_GRCh38_Repl1.bam", fragLength=450)
peaks <- callPeaks("MM.1S_H3K9Me3_GRCh38_Repl1.bam", fragLength=450)
peaks <- callPeaks("MM.1S_H3K9Me3_GRCh38_Repl2.bam", fragLength=450)
peaks <- callPeaks("H929_H3K9Me3_GRCh38_Repl1.bam", fragLength=350)
download.file("https://www.encodeproject.org/files/ENCFF664NUE/@@download/ENCFF664NUE.bam", "MM.1S_H3K9Me3_GRCh38_Repl1.bam", mode = "wb")
peaks <- callPeaks("H929_H3K9Me3_GRCh38_Repl1.bam", fragLength=350)
peaks <- callPeaks("H929_H3K9Me3_GRCh38_Repl1.bam", fragLength=350)
peaks <- callPeaks("H929_H3K9Me3_GRCh38_Repl2.bam", fragLength=350)
peaks <- callPeaks("MM.1S_H3K9Me3_GRCh38_Repl1.bam", fragLength=450)
peaks <- callPeaks("MM.1S_H3K9Me3_GRCh38_Repl2.bam", fragLength=450)
peaks <- callPeaks("MM.1S_H3K9Me3_GRCh38_Repl2.bam", fragLength=450L)
peaks <- callPeaks("MM.1S_H3K9Me3_GRCh38_Repl2.bam")
peaks
# make a list of file names,here for H3K9Me3
bamFiles <- c("MM.1S_H3K9Me3_GRCh38_Repl1.bam", "MM.1S_H3K9Me3_GRCh38_Repl2.bam", "H929_H3K9Me3_GRCh38_Repl1.bam", "H929_H3K9Me3_GRCh38_Repl2.bam", "F43_H3K9Me3_GRCh38_Repl1.bam", "M37_H3K9Me3_GRCh38_Repl1.bam")
peaks <- callPeaks("MM.1S_H3K9Me3_GRCh38_Repl2.bam", fragLength=300L)
peaks
629916-629947
634016-634055
bamFiles[1]
bedFiles <- sub(".bam", "peaks.bed", bamFiles)
bedfiles
bedFiles
bedFiles <- sub(".bam", "_peaks.bed", bamFiles)
bedFiles
chr1bedFiles <- sub(".bam", "_peaks_chr1.bed", bamFiles)
chr1bedFiles
bamFiles[2]
bamFiles[2] <- "test"
bamFiles[2]
bamFiles
peaks
seqnames(chr1)
library(GenomicRanges)
seqnames(peaks)
chr1Peaks <- peaks[seqnames(peaks) == "chr1"]
chr1Peaks
??callPeaks
# make a list of file names,here for H3K9Me3
bamFiles <- c("MM.1S_H3K9Me3_GRCh38_Repl1.bam", "MM.1S_H3K9Me3_GRCh38_Repl2.bam", "H929_H3K9Me3_GRCh38_Repl1.bam", "H929_H3K9Me3_GRCh38_Repl2.bam", "F43_H3K9Me3_GRCh38_Repl1.bam", "M37_H3K9Me3_GRCh38_Repl1.bam")
# fragment length vector
fragLen <- c(300L, 300L, 250L, 250L, 200L, 200L)
# build a list of file names to save the peaks data as, including limitation to chr1
bedFiles <- sub(".bam", "_peaks.bed", bamFiles)
chr1bedFiles <- sub(".bam", "_peaks_chr1.bed", bamFiles)
# go through each bam file and save it as bed file
# also save a bed file that is reduced to chromosome 1
for (i in seq_along(bamFiles)) {
peaks <- callPeaks(bamFiles[i], fragLength=fragLen[i])
chr1Ppeaks <- peaks[seqnames(peaks) == "chr1"]
rtracklayer::export.bed(peaks, bedFiles[i])
}
knitr::opts_chunk$set(echo = TRUE)
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF886SFI/@@download/ENCFF886SFI.bam", "https://www.encodeproject.org/files/ENCFF277DVZ/@@download/ENCFF277DVZ.bam")
fileNames <- c("H929_H3K27Me3_GRCh38_Repl1.bam", "H929_H3K27Me3_GRCh38_Repl2.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF886SFI/@@download/ENCFF886SFI.bam", "https://www.encodeproject.org/files/ENCFF277DVZ/@@download/ENCFF277DVZ.bam")
fileNames <- c("H929_H3K27Me3_GRCh38_Repl1.bam", "H929_H3K27Me3_GRCh38_Repl2.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
options(timeout = 999999)
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF886SFI/@@download/ENCFF886SFI.bam", "https://www.encodeproject.org/files/ENCFF277DVZ/@@download/ENCFF277DVZ.bam")
fileNames <- c("H929_H3K27Me3_GRCh38_Repl1.bam", "H929_H3K27Me3_GRCh38_Repl2.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
options(timeout = 999999)
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF677VXT/@@download/ENCFF677VXT.bam", "https://www.encodeproject.org/files/ENCFF888PJD/@@download/ENCFF888PJD.bam")
fileNames <- c("F27_H3K27Me3_GRCh38_Repl1.bam", "F27_H3K27Me3_GRCh38_Repl2.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
options(timeout = 999999)
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF118UGM/@@download/ENCFF118UGM.bam", "https://www.encodeproject.org/files/ENCFF976DNL/@@download/ENCFF976DNL.bam")
fileNames <- c("M37_H3K27Me3_GRCh38_Repl1.bam", "M21_H3K27Me3_GRCh38_Repl2.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
??callPeaks
# make a list of file names,here for H3K9Me3
bamFiles <- c("MM.1S_H3K27Me3_GRCh38_Repl1.bam", "MM.1S_H3K27Me3_GRCh38_Repl2.bam", "H929_H3K27Me3_GRCh38_Repl1.bam", "H929_H3K27Me3_GRCh38_Repl2.bam", "F27_H3K27Me3_GRCh38_Repl1.bam", "F27_H3K27Me3_GRCh38_Repl2.bam", "M21_H3K27Me3_GRCh38_Repl1.bam", "M37_H3K27Me3_GRCh38_Repl1.bam")
# fragment length vector
fragLen <- c(300L, 300L, 250L, 250L, 200L, 200L, 200L, 200L)
# build a list of file names to save the peaks data as, including limitation to chr1
bedFiles <- sub(".bam", "_peaks.bed", bamFiles)
chr1bedFiles <- sub(".bam", "_peaks_chr1.bed", bamFiles)
# go through each
# first build a bai index file to prevent errors in callPeaks
# save a bed file with the peaks
# also save a bed file that is reduced to chromosome 1
# if there is an error just skip to the next file
for (i in seq_along(bamFiles)) {
indexBam(bamFiles[i])
skip <- FALSE
tryCatch(peaks <- callPeaks(bamFiles[i], fragLength=fragLen[i]), error = function(e) { skip <<- TRUE})
if(skip) { next }
chr1Ppeaks <- peaks[seqnames(peaks) == "chr1"]
rtracklayer::export.bed(peaks, bedFiles[i])
rtracklayer::export.bed(chr1Ppeaks, chr1bedFiles[i])
}
suppressPackageStartupMessages({
library(Rsamtools)
library(GenomicAlignments)
library(epiwraps)
library(GenomicRanges)
})
??callPeaks
# make a list of file names,here for H3K9Me3
bamFiles <- c("MM.1S_H3K27Me3_GRCh38_Repl1.bam", "MM.1S_H3K27Me3_GRCh38_Repl2.bam", "H929_H3K27Me3_GRCh38_Repl1.bam", "H929_H3K27Me3_GRCh38_Repl2.bam", "F27_H3K27Me3_GRCh38_Repl1.bam", "F27_H3K27Me3_GRCh38_Repl2.bam", "M21_H3K27Me3_GRCh38_Repl1.bam", "M37_H3K27Me3_GRCh38_Repl1.bam")
# fragment length vector
fragLen <- c(300L, 300L, 250L, 250L, 200L, 200L, 200L, 200L)
# build a list of file names to save the peaks data as, including limitation to chr1
bedFiles <- sub(".bam", "_peaks.bed", bamFiles)
chr1bedFiles <- sub(".bam", "_peaks_chr1.bed", bamFiles)
# go through each
# first build a bai index file to prevent errors in callPeaks
# save a bed file with the peaks
# also save a bed file that is reduced to chromosome 1
# if there is an error just skip to the next file
for (i in seq_along(bamFiles)) {
indexBam(bamFiles[i])
skip <- FALSE
tryCatch(peaks <- callPeaks(bamFiles[i], fragLength=fragLen[i]), error = function(e) { skip <<- TRUE})
if(skip) { next }
chr1Ppeaks <- peaks[seqnames(peaks) == "chr1"]
rtracklayer::export.bed(peaks, bedFiles[i])
rtracklayer::export.bed(chr1Ppeaks, chr1bedFiles[i])
}
??callPeaks
# make a list of file names,here for H3K9Me3
bamFiles <- c("H929_H3K27Me3_GRCh38_Repl2.bam", "F27_H3K27Me3_GRCh38_Repl1.bam", "F27_H3K27Me3_GRCh38_Repl2.bam", "M21_H3K27Me3_GRCh38_Repl1.bam", "M37_H3K27Me3_GRCh38_Repl1.bam")
# fragment length vector
fragLen <- c(250L, 200L, 200L, 200L, 200L)
# build a list of file names to save the peaks data as, including limitation to chr1
bedFiles <- sub(".bam", "_peaks.bed", bamFiles)
chr1bedFiles <- sub(".bam", "_peaks_chr1.bed", bamFiles)
# go through each
# first build a bai index file to prevent errors in callPeaks
# save a bed file with the peaks
# also save a bed file that is reduced to chromosome 1
# if there is an error just skip to the next file
for (i in seq_along(bamFiles)) {
indexBam(bamFiles[i])
skip <- FALSE
tryCatch(peaks <- callPeaks(bamFiles[i], fragLength=fragLen[i]), error = function(e) { skip <<- TRUE})
if(skip) { next }
chr1Ppeaks <- peaks[seqnames(peaks) == "chr1"]
rtracklayer::export.bed(peaks, bedFiles[i])
rtracklayer::export.bed(chr1Ppeaks, chr1bedFiles[i])
}
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(Rsamtools)
library(GenomicAlignments)
library(epiwraps)
library(GenomicRanges)
})
options(timeout = 999999)
#H3K9me3
downloadLinks <- c("https://www.encodeproject.org/files/ENCFF674OHP/@@download/ENCFF674OHP.bam", "https://www.encodeproject.org/files/ENCFF270IYZ/@@download/ENCFF270IYZ.bam", "https://www.encodeproject.org/files/ENCFF624XXC/@@download/ENCFF624XXC.bam", "https://www.encodeproject.org/files/ENCFF818DII/@@download/ENCFF818DII.bam", "https://www.encodeproject.org/files/ENCFF569BNQ/@@download/ENCFF569BNQ.bam", "https://www.encodeproject.org/files/ENCFF626HHQ/@@download/ENCFF626HHQ.bam")
fileNames <- c("MM.1S_H3K4Me3_GRCh38_Repl1.bam", "MM.1S_H3K4Me3_GRCh38_Repl2.bam", "H929_H3K4Me3_GRCh38_Repl1.bam", "H929_H3K4Me3_GRCh38_Repl2.bam", "F43_H3K4Me3_GRCh38_Repl1.bam", "F27_H3K4Me3_GRCh38_Repl1.bam")
# Loop through the lists and download files
for (i in seq_along(downloadLinks)) {
download.file(downloadLinks[i], fileNames[i], mode = "wb")
}
library(AnnotationHub)
ah = AnnotationHub()
BiocHubsShiny::BiocHubsShiny()
dm <- query(ah, c("UCSC", "homo sapiens"))
dm
dm <- query(ah, c("UCSC", "homo sapiens", "tumor supressors"))
dm
dm <- query(ah, c("UCSC", "homo sapiens", "tumor"))
dm
